#include <stdio.h>

struct Work {
    char id;        
    int deadline;   
    int profit;     
};

void jobSequencingWithDeadline(struct Work works[], int n) {
    
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (works[j].profit < works[j + 1].profit) {
                
                struct Work temp = works[j];
                works[j] = works[j + 1];
                works[j + 1] = temp;
            }
        }
    }

    
    printf("Job | Deadline | Profit\n");
    for (int i = 0; i < n; i++) {
        printf("%d   | %d        | %d\n", works[i].id, works[i].deadline, works[i].profit);
    }

    
    int dmax = works[0].deadline;
    for (int i = 1; i < n; i++) {
        if (works[i].deadline > dmax) {
            dmax = works[i].deadline;
        }
    }

    
    int timeslot[dmax + 1];  
    for (int i = 0; i <= dmax; i++) {
        timeslot[i] = -1;  
    }
    
    int filledSlots = 0;

    
    for (int i = 0; i < n; i++) {
        
        int k = (works[i].deadline < dmax) ? works[i].deadline : dmax;
        
        while (k >= 1) {
            if (timeslot[k] == -1) {
                
                timeslot[k] = i;
                filledSlots++;
                break;
            }
            k--;  
        }

        if (filledSlots == dmax) {
            break;  
        }
    }

   
    printf("\nRequired Jobs: ");
    for (int i = 1; i <= dmax; i++) {
        if (timeslot[i] != -1) {
            printf("%d", works[timeslot[i]].id);
            if (i < dmax) {
                printf(" --> ");
            }
        }
    }
    printf("\n");

    
    int maxProfit = 0;
    for (int i = 1; i <= dmax; i++) {
        if (timeslot[i] != -1) {
            maxProfit += works[timeslot[i]].profit;
        }
    }
    printf("Max Profit = %d\n", maxProfit);
}

int main() {
    struct Work works[] = {
        {1, 2, 100},
        {2, 1, 19},
        {3, 2, 27},
        {4, 1, 25},
        {5, 3, 15}
    };

    int n = sizeof(works) / sizeof(works[0]);
    jobSequencingWithDeadline(works, n);

    return 0;
}
